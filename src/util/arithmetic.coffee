
arithmetic =
    STIRLING_CORRECTION: [
        0.0,
        8.106146679532726e-02,
        4.134069595540929e-02,
        2.767792568499834e-02,
        2.079067210376509e-02,
        1.664469118982119e-02,
        1.387612882307075e-02,
        1.189670994589177e-02,
        1.041126526197209e-02,
        9.255462182712733e-03,
        8.330563433362871e-03,
        7.573675487951841e-03,
        6.942840107209530e-03,
        6.408994188004207e-03,
        5.951370112758848e-03,
        5.554733551962801e-03,
        5.207655919609640e-03,
        4.901395948434738e-03,
        4.629153749334029e-03,
        4.385560249232324e-03,
        4.166319691996922e-03,
        3.967954218640860e-03,
        3.787618068444430e-03,
        3.622960224683090e-03,
        3.472021382978770e-03,
        3.333155636728090e-03,
        3.204970228055040e-03,
        3.086278682608780e-03,
        2.976063983550410e-03,
        2.873449362352470e-03,
        2.777674929752690e-03
    ],

    # Math.log(k!) for k = 0 ... 29
    LOG_FACTORIALS: [
        0.00000000000000000,
        0.00000000000000000,
        0.69314718055994531,
        1.79175946922805500,
        3.17805383034794562,
        4.78749174278204599,
        6.57925121201010100,
        8.52516136106541430,
        10.60460290274525023,
        12.80182748008146961,
        15.10441257307551530,
        17.50230784587388584,
        19.98721449566188615,
        22.55216385312342289,
        25.19122118273868150,
        27.89927138384089157,
        30.67186010608067280,
        33.50507345013688888,
        36.39544520803305358,
        39.33988418719949404,
        42.33561646075348503,
        45.38013889847690803,
        48.47118135183522388,
        51.60667556776437357,
        54.78472939811231919,
        58.00360522298051994,
        61.26170176100200198,
        64.55753862700633106,
        67.88974313718153498,
        71.25703896716800901
    ],

    # k! for k = 0 ... 20
    LONG_FACTORIALS: [
        1,
        1,
        2,
        6,
        24,
        120,
        720,
        5040,
        40320,
        362880,
        3628800,
        39916800,
        479001600,
        6227020800,
        87178291200,
        1307674368000,
        20922789888000,
        355687428096000,
        6402373705728000,
        121645100408832000,
        2432902008176640000
    ],

    # k! for k = 21 ... 170
    DOUBLE_FACTORIALS: [
        5.109094217170944e19,
        1.1240007277776077e21,
        2.585201673888498e22,
        6.204484017332394e23,
        1.5511210043330984e25,
        4.032914611266057e26,
        1.0888869450418352e28,
        3.048883446117138e29,
        8.841761993739701e30,
        2.652528598121911e32,
        8.222838654177924e33,
        2.6313083693369355e35,
        8.68331761881189e36,
        2.952327990396041e38,
        1.0333147966386144e40,
        3.719933267899013e41,
        1.3763753091226346e43,
        5.23022617466601e44,
        2.0397882081197447e46,
        8.15915283247898e47,
        3.34525266131638e49,
        1.4050061177528801e51,
        6.041526306337384e52,
        2.6582715747884495e54,
        1.196222208654802e56,
        5.502622159812089e57,
        2.5862324151116827e59,
        1.2413915592536068e61,
        6.082818640342679e62,
        3.0414093201713376e64,
        1.5511187532873816e66,
        8.06581751709439e67,
        4.274883284060024e69,
        2.308436973392413e71,
        1.2696403353658264e73,
        7.109985878048632e74,
        4.052691950487723e76,
        2.350561331282879e78,
        1.386831185456898e80,
        8.32098711274139e81,
        5.075802138772246e83,
        3.146997326038794e85,
        1.9826083154044396e87,
        1.2688693218588414e89,
        8.247650592082472e90,
        5.443449390774432e92,
        3.6471110918188705e94,
        2.48003554243683e96,
        1.7112245242814127e98,
        1.1978571669969892e100,
        8.504785885678624e101,
        6.123445837688612e103,
        4.470115461512686e105,
        3.307885441519387e107,
        2.4809140811395404e109,
        1.8854947016660506e111,
        1.451830920282859e113,
        1.1324281178206295e115,
        8.94618213078298e116,
        7.15694570462638e118,
        5.797126020747369e120,
        4.7536433370128435e122,
        3.94552396972066e124,
        3.314240134565354e126,
        2.8171041143805494e128,
        2.4227095383672744e130,
        2.107757298379527e132,
        1.854826422573984e134,
        1.6507955160908465e136,
        1.4857159644817605e138,
        1.3520015276784033e140,
        1.2438414054641305e142,
        1.156772507081641e144,
        1.0873661566567426e146,
        1.0329978488239061e148,
        9.916779348709491e149,
        9.619275968248216e151,
        9.426890448883248e153,
        9.332621544394415e155,
        9.332621544394418e157,
        9.42594775983836e159,
        9.614466715035125e161,
        9.902900716486178e163,
        1.0299016745145631e166,
        1.0813967582402912e168,
        1.1462805637347086e170,
        1.2265202031961373e172,
        1.324641819451829e174,
        1.4438595832024942e176,
        1.5882455415227423e178,
        1.7629525510902457e180,
        1.974506857221075e182,
        2.2311927486598138e184,
        2.543559733472186e186,
        2.925093693493014e188,
        3.393108684451899e190,
        3.96993716080872e192,
        4.6845258497542896e194,
        5.574585761207606e196,
        6.689502913449135e198,
        8.094298525273444e200,
        9.875044200833601e202,
        1.2146304367025332e205,
        1.506141741511141e207,
        1.882677176888926e209,
        2.3721732428800483e211,
        3.0126600184576624e213,
        3.856204823625808e215,
        4.974504222477287e217,
        6.466855489220473e219,
        8.471580690878813e221,
        1.1182486511960037e224,
        1.4872707060906847e226,
        1.99294274616152e228,
        2.690472707318049e230,
        3.6590428819525483e232,
        5.0128887482749884e234,
        6.917786472619482e236,
        9.615723196941089e238,
        1.3462012475717523e241,
        1.8981437590761713e243,
        2.6953641378881633e245,
        3.8543707171800694e247,
        5.550293832739308e249,
        8.047926057471989e251,
        1.1749972043909107e254,
        1.72724589045464e256,
        2.5563239178728637e258,
        3.8089226376305687e260,
        5.7133839564458575e262,
        8.627209774233244e264,
        1.3113358856834527e267,
        2.0063439050956838e269,
        3.0897696138473515e271,
        4.789142901463393e273,
        7.471062926282892e275,
        1.1729568794264134e278,
        1.8532718694937346e280,
        2.946702272495036e282,
        4.714723635992061e284,
        7.590705053947223e286,
        1.2296942187394494e289,
        2.0044015765453032e291,
        3.287218585534299e293,
        5.423910666131583e295,
        9.003691705778434e297,
        1.5036165148649983e300,
        2.5260757449731988e302,
        4.2690680090047056e304,
        7.257415615308004e306
    ],
    ###*
     * Return the binomial coefficient
     * @type {[type]}
    ###
    binomial: (n, k) ->
        if k < 0 then 0
        else if k == 0 then 1
        else if k == 1 then n
        else
            a = n - k + 1
            b = 1
            binomial = 1
            i = k
            while i--
                binomial *= (a++) / (b++)
            binomial
    ceil: (value) ->
        Math.round(Math.ceil(value))
    chbevl: (x, coef, N) ->
        p = 0
        b0 = coef[p++]
        b1 = 0.0
        i = N
        while i--
            b2 = b1
            b1 = b0
            b0 = x * b1 - b2 + coef[p++]
        0.5 * (b0 - b2)
    factorial: (k) ->
        # TODO Throw error if k < 0
        l1 = @LONG_FACTORIALS.length
        l2 = @DOUBLE_FACTORIALS.length
        if k < l1 then @LONG_FACTORIALS[k]
        else if k < l1 + l2 then DOUBLE_FACTORIALS[k - l1]
        else Number.POSITIVE_INFINITY
    floor: (value) ->
        Math.round(Math.floor(value))
    log: (base, value) ->
        Math.log(value) / Math.log(base)
    log10: (value) ->
        Math.log(value) * 0.43429448190325176
    log2: (value) ->
        Math.log(value) * 1.4426950408889634
    logFactorial: (k) ->
        if k >= 30
            r = 1.0 / k
            rr = r * r
            C7 = -5.95238095238095238e-04
            C5 = 7.93650793650793651e-04
            C3 = -2.77777777777777778e-03
            C1 = 8.33333333333333333e-02
            C0 = 9.18938533204672742e-01
            (k + 0.5) * Math.log(k) - k + C0 + r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));
        else
            @LOG_FACTORIALS[k]
    longFactorial: (k) ->
        ## TODO THROW ERROR if k < 0 then
        if k < @LONG_FACTORIALS.length then @LONG_FACTORIALS[k]
    stirlingCorrection: (k) ->
        if k >= 30
            r = 1.0 / k;
            rr = r * r;
            C7 = -5.95238095238095238e-04;     #  -1/1680
            C5 = 7.93650793650793651e-04;      #  +1/1260
            C3 = -2.77777777777777778e-03;     #  -1/360
            C1 = 8.33333333333333333e-02;      #  +1/12
            r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));
        else @STIRLING_CORRECTION[k]

module.exports = arithmetic